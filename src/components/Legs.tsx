/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { act, Suspense, useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { CapsuleCollider } from "@react-three/rapier";

export const Legs = () => {
  const group = useRef();
  const { nodes, materials, animations }: any = useGLTF("/models/legs.glb");
  const { actions } = useAnimations(animations, group);
  const [isShiftPressed, setIsShiftPressed] = useState(false);
  const [isWPressed, setIsWPressed] = useState(false);
  const [isSPressed, setIsSPressed] = useState(false);

  console.log("actions:", actions);
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === "Shift") {
        setIsShiftPressed(true);
      }
      if (event.key === "w" || event.key === "W") {
        setIsWPressed(true);
      }
      if (event.key === "s" || event.key === "S") {
        setIsSPressed(true);
      }
    };

    const handleKeyUp = (event: KeyboardEvent) => {
      if (event.key === "Shift") {
        setIsShiftPressed(false);
      }
      if (event.key === "w" || event.key === "W") {
        setIsWPressed(false);
      }
      if (event.key === "s" || event.key === "S") {
        setIsSPressed(false);
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, []);

  useEffect(() => {
    if (actions["Walking"] && actions["Idle"]) {
      if (isWPressed || isSPressed) {
        actions["Walking"].play();
        actions["Walking"].timeScale = isShiftPressed ? 2.3 : 1;
      } else {
        actions["Walking"].stop();
        actions["Idle"].play();
      }
    }
  }, [actions, isShiftPressed, isWPressed, isSPressed]);

  return (
    <Suspense fallback={<capsuleGeometry args={[0.3, 0.7]} />}>
      <CapsuleCollider args={[0.3, 0.4]} />

      <group
        ref={group}
        dispose={null}
        position={[0, -0.3, 0]}
        scale={0.5}
        rotation={[0, Math.PI, 0]}
      >
        <group name="Scene">
          <group name="Armature">
            <primitive object={nodes.GoalMiddleR} />
            <primitive object={nodes.PoleMiddleR} />
            <primitive object={nodes.GoalFrontR} />
            <primitive object={nodes.PoleFrontR} />
            <primitive object={nodes.GoalBackR} />
            <primitive object={nodes.PoleBackR} />
            <primitive object={nodes.GoalMiddleL} />
            <primitive object={nodes.PoleMiddleL} />
            <primitive object={nodes.GoalFrontL} />
            <primitive object={nodes.PoleFrontL} />
            <primitive object={nodes.GoalBackL} />
            <primitive object={nodes.PoleBackL} />
            <primitive object={nodes.Body} />
          </group>
          <group name="BODY">
            <skinnedMesh
              name="Mesh"
              geometry={nodes.Mesh.geometry}
              material={materials.Plastic}
              skeleton={nodes.Mesh.skeleton}
            />
            <skinnedMesh
              name="Mesh_1"
              geometry={nodes.Mesh_1.geometry}
              material={materials.PaletteMaterial001}
              skeleton={nodes.Mesh_1.skeleton}
            />
            <skinnedMesh
              name="Mesh_2"
              geometry={nodes.Mesh_2.geometry}
              material={materials.PaletteMaterial002}
              skeleton={nodes.Mesh_2.skeleton}
            />
          </group>
          <group name="LEGS">
            <skinnedMesh
              name="BezierCurve"
              geometry={nodes.BezierCurve.geometry}
              material={materials.PaletteMaterial003}
              skeleton={nodes.BezierCurve.skeleton}
            />
            <skinnedMesh
              name="BezierCurve_1"
              geometry={nodes.BezierCurve_1.geometry}
              material={materials.PaletteMaterial004}
              skeleton={nodes.BezierCurve_1.skeleton}
            />
            <skinnedMesh
              name="BezierCurve_2"
              geometry={nodes.BezierCurve_2.geometry}
              material={materials.PaletteMaterial005}
              skeleton={nodes.BezierCurve_2.skeleton}
            />
          </group>
        </group>
      </group>
    </Suspense>
  );
};

useGLTF.preload("/models/legs.glb");
